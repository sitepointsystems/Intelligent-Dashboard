<?php
declare(strict_types=1);

/**
 * Drop-in auth + first-run config wizard using a .env file
 *
 * Usage in browser-served files:
 *   require_once __DIR__ . '/auth.php';
 *
 * Usage in proxy (env-only):
 *   define('AUTH_ENV_ONLY', true);
 *   require_once __DIR__ . '/auth.php';
 *
 * Features:
 * - If .env is missing: shows setup form (username, password, PROP_WEBHOOK_URL, N8N_WEBHOOK, RENDERER_URL),
 *   auto-generates RENDER_KEY, writes .env (password stored as PASSWORD_HASH), and logs in.
 * - If .env exists but RENDER_KEY is missing: generates & persists it transparently.
 * - Trusted render bypass: if header X-Render-Key matches .env's RENDER_KEY, skip login.
 * - Logout: add ?logout=1
 */

/////////////////////////
// Paths & small utils //
/////////////////////////
function AUTH_env_path(): string {
  return getenv('ENV_PATH') ?: (__DIR__ . '/.env');
}
function AUTH_e(string $s): string { return htmlspecialchars($s, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8'); }

function AUTH_base_url_guess(): string {
  $isHttps = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') || (($_SERVER['SERVER_PORT'] ?? '') == 443);
  $scheme  = $isHttps ? 'https' : 'http';
  $host    = $_SERVER['HTTP_HOST'] ?? 'localhost';
  $dir     = rtrim(str_replace('\\','/', dirname($_SERVER['SCRIPT_NAME'] ?? '/')), '/');
  return $scheme . '://' . $host . ($dir ? $dir : '');
}

function AUTH_read_env(string $path): array {
  if (!is_file($path)) return [];
  $out = [];
  foreach (file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) ?: [] as $line) {
    if (preg_match('/^\s*#/', $line)) continue;
    if (!str_contains($line, '=')) continue;
    [$k, $v] = explode('=', $line, 2);
    $k = trim($k);
    $v = trim($v);
    if ((str_starts_with($v, '"') && str_ends_with($v, '"')) || (str_starts_with($v, "'") && str_ends_with($v, "'"))) {
      $v = substr($v, 1, -1);
    }
    $out[$k] = $v;
  }
  return $out;
}

/** URL-safe random key, good for headers */
function AUTH_generate_key(int $bytes = 32): string {
  return rtrim(strtr(base64_encode(random_bytes($bytes)), '+/', '-_'), '=');
}

/**
 * Writes .env. Writes known keys in a preferred order, then any extra keys.
 * Values are always quoted.
 */
function AUTH_write_env(string $path, array $kv): bool {
  $lines = [];
  $lines[] = "# Generated by auth.php on " . date('c');

  $preferredOrder = [
    'USERNAME','PASSWORD_HASH','PROP_WEBHOOK_URL','N8N_WEBHOOK','RENDERER_URL','RENDER_KEY'
  ];

  $written = [];
  foreach ($preferredOrder as $k) {
    if (!array_key_exists($k, $kv)) continue;
    $v = (string)$kv[$k];
    $v = '"' . str_replace('"','\"',$v) . '"';
    $lines[] = $k . '=' . $v;
    $written[$k] = true;
  }

  // Append any remaining keys (stable, alphabetical)
  $rest = array_diff_key($kv, $written);
  ksort($rest);
  foreach ($rest as $k => $v) {
    $v = (string)$v;
    $v = '"' . str_replace('"','\"',$v) . '"';
    $lines[] = $k . '=' . $v;
  }

  $content = implode("\n", $lines) . "\n";
  $ok = @file_put_contents($path, $content, LOCK_EX);
  if ($ok !== false) {
    @chmod($path, 0600);
    return true;
  }
  return false;
}

function AUTH_define_if_absent(string $const, string $value): void {
  if (!defined($const)) define($const, $value);
}

/////////////////////
// Session & CSRF  //
/////////////////////
if (session_status() !== PHP_SESSION_ACTIVE) {
  session_set_cookie_params([
    'lifetime' => 0,
    'path' => '/',
    'httponly' => true,
    'secure' => (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off'),
    'samesite' => 'Lax',
  ]);
  session_name('dashsess');
  session_start();
}
if (empty($_SESSION['csrf'])) {
  $_SESSION['csrf'] = bin2hex(random_bytes(16));
}

//////////////////////
// Logout shortcut  //
//////////////////////
if (isset($_GET['logout'])) {
  $_SESSION = [];
  if (ini_get('session.use_cookies')) {
    $params = session_get_cookie_params();
    setcookie(session_name(), '', time() - 42000, $params['path'], $params['domain'] ?? '', $params['secure'], $params['httponly']);
  }
  session_destroy();
  header('Location: ' . strtok($_SERVER['REQUEST_URI'], '?'), true, 303);
  exit;
}

//////////////////////
// Load or create .env
//////////////////////
$ENV_PATH = AUTH_env_path();
$env = AUTH_read_env($ENV_PATH);
$envExists = !empty($env);

// If proxy/env-only mode is used and .env is missing: return 503 (no UI in env-only mode)
if (defined('AUTH_ENV_ONLY') && AUTH_ENV_ONLY) {
  if (!$envExists) {
    http_response_code(503);
    header('Content-Type: text/plain; charset=UTF-8');
    echo "Missing .env. Please run setup in a browser first.";
    exit;
  }
  // Ensure RENDER_KEY exists; if not, create & persist it
  if (empty($env['RENDER_KEY'])) {
    $env['RENDER_KEY'] = AUTH_generate_key();
    AUTH_write_env($ENV_PATH, $env);
  }
  // Expose env as constants and return
  AUTH_define_if_absent('PROP_WEBHOOK_URL', (string)($env['PROP_WEBHOOK_URL'] ?? ''));
  AUTH_define_if_absent('N8N_WEBHOOK',      (string)($env['N8N_WEBHOOK'] ?? ''));
  $defaultRenderer = AUTH_base_url_guess() . '/index.php';
  AUTH_define_if_absent('RENDERER_URL',     (string)($env['RENDERER_URL'] ?? $defaultRenderer));
  AUTH_define_if_absent('RENDER_KEY',       (string)$env['RENDER_KEY']);
  return;
}

$brand = 'Intelligent Dashboard'; // used in the form UI

/////////////////////////////////////////////////////////
// First-run wizard (when .env is missing): build .env //
/////////////////////////////////////////////////////////
if (!$envExists) {
  $errors = [];

  $defaultRenderer = AUTH_base_url_guess() . '/index.php';

  if ($_SERVER['REQUEST_METHOD'] === 'POST' && ($_POST['mode'] ?? '') === 'setup') {
    $csrf = $_POST['csrf'] ?? '';
    if (!hash_equals($_SESSION['csrf'], $csrf)) {
      $errors[] = 'Session expired. Please try again.';
    } else {
      $username = trim((string)($_POST['username'] ?? ''));
      $password = (string)($_POST['password'] ?? '');
      $propHook = trim((string)($_POST['prop_webhook_url'] ?? ''));
      $n8nHook  = trim((string)($_POST['n8n_webhook'] ?? ''));
      $renderer = trim((string)($_POST['renderer_url'] ?? ''));

      if ($username === '') $errors[] = 'Username is required.';
      if ($password === '') $errors[] = 'Password is required.';
      if ($renderer === '') $renderer = $defaultRenderer;

      if (!$errors) {
        $hash = password_hash($password, PASSWORD_DEFAULT);
        $renderKey = AUTH_generate_key(); // <<< auto-generate trusted render key
        $writeOk = AUTH_write_env($ENV_PATH, [
          'USERNAME'         => $username,
          'PASSWORD_HASH'    => $hash,
          'PROP_WEBHOOK_URL' => $propHook,
          'N8N_WEBHOOK'      => $n8nHook,
          'RENDERER_URL'     => $renderer,
          'RENDER_KEY'       => $renderKey,
        ]);
        if (!$writeOk) {
          $errors[] = 'Could not write .env file. Check folder permissions.';
        } else {
          // auto-login
          $_SESSION['auth_user'] = $username;
          header('Location: ' . strtok($_SERVER['REQUEST_URI'], '?'), true, 303);
          exit;
        }
      }
    }
  }

  // Render first-run setup form (dashboard-like styling)
  AUTH_render_page('Setup', $brand, function() use ($errors, $defaultRenderer) {
    $prop_webhook_url = AUTH_e((string)($_POST['prop_webhook_url'] ?? ''));
    $n8n_webhook      = AUTH_e((string)($_POST['n8n_webhook'] ?? ''));
    $renderer_url     = AUTH_e((string)($_POST['renderer_url'] ?? $defaultRenderer));
    $username         = AUTH_e((string)($_POST['username'] ?? ''));
    ?>
    <div class="card" style="--span:12;max-width:580px;margin:0 auto;">
      <h3>First-time setup</h3>
      <div class="sub">Create your admin login and set integration URLs. This will create a <code>.env</code> file next to your PHP files. A secure internal <code>RENDER_KEY</code> is generated automatically.</div>
      <?php if ($errors): ?>
        <div class="error">
          <?php foreach ($errors as $e): ?>
            <div>• <?= AUTH_e($e) ?></div>
          <?php endforeach; ?>
        </div>
      <?php endif; ?>

      <form method="post" class="form">
        <input type="hidden" name="mode" value="setup">
        <input type="hidden" name="csrf" value="<?= AUTH_e($_SESSION['csrf']) ?>">

        <label>Username
          <input type="text" name="username" required autocomplete="username" value="<?= $username ?>">
        </label>

        <label>Password
          <input type="password" name="password" required autocomplete="new-password">
        </label>

        <div class="divider"></div>

        <label>PROP_WEBHOOK_URL
          <input type="url" name="prop_webhook_url" placeholder="https://example.com/webhook/..." value="<?= $prop_webhook_url ?>">
        </label>

        <label>N8N_WEBHOOK
          <input type="url" name="n8n_webhook" placeholder="https://example.com/webhook/..." value="<?= $n8n_webhook ?>">
        </label>

        <label>RENDERER_URL
          <input type="url" name="renderer_url" value="<?= $renderer_url ?>">
          <div class="hint">Defaulted to this server’s domain/path.</div>
        </label>

        <button class="button" type="submit">Create .env & Continue</button>
      </form>
    </div>
    <?php
  });
  exit;
}

// At this point .env exists.
// Backfill: if RENDER_KEY is missing (old installs), create & persist it.
if (empty($env['RENDER_KEY'])) {
  $env['RENDER_KEY'] = AUTH_generate_key();
  AUTH_write_env($ENV_PATH, $env);
}

// Trusted render bypass (server-to-server call from proxy)
$trustedHeader = isset($_SERVER['HTTP_X_RENDER_KEY']) ? (string)$_SERVER['HTTP_X_RENDER_KEY'] : '';
$isTrustedRender = ($trustedHeader !== '') && hash_equals((string)$env['RENDER_KEY'], $trustedHeader);

if ($isTrustedRender) {
  AUTH_define_if_absent('PROP_WEBHOOK_URL', (string)($env['PROP_WEBHOOK_URL'] ?? ''));
  AUTH_define_if_absent('N8N_WEBHOOK',      (string)($env['N8N_WEBHOOK'] ?? ''));
  $defaultRenderer = AUTH_base_url_guess() . '/index.php';
  AUTH_define_if_absent('RENDERER_URL',     (string)($env['RENDERER_URL'] ?? $defaultRenderer));
  AUTH_define_if_absent('RENDER_KEY',       (string)$env['RENDER_KEY']);
  return; // skip login completely
}

/////////////////////////
// Normal login screen //
/////////////////////////
if (empty($_SESSION['auth_user'])) {
  $loginError = '';

  if ($_SERVER['REQUEST_METHOD'] === 'POST' && ($_POST['mode'] ?? '') === 'login') {
    $csrf = $_POST['csrf'] ?? '';
    if (!hash_equals($_SESSION['csrf'], $csrf)) {
      $loginError = 'Session expired. Please try again.';
    } else {
      $u = (string)($_POST['username'] ?? '');
      $p = (string)($_POST['password'] ?? '');

      $envUser = (string)($env['USERNAME'] ?? '');
      $envHash = (string)($env['PASSWORD_HASH'] ?? '');
      $envPlain = (string)($env['PASSWORD'] ?? ''); // legacy/plain support (optional)

      $ok = false;
      if ($u === $envUser && $envHash !== '') {
        $ok = password_verify($p, $envHash);
      } elseif ($u === $envUser && $envPlain !== '') {
        $ok = hash_equals($envPlain, $p);
      }

      if ($ok) {
        $_SESSION['auth_user'] = $u;
        header('Location: ' . strtok($_SERVER['REQUEST_URI'], '?'), true, 303);
        exit;
      } else {
        $loginError = 'Invalid username or password.';
      }
    }
  }

  // Render login page (dashboard-like)
  AUTH_render_page('Login', $brand, function() use ($loginError) {
    ?>
    <div class="card" style="--span:12;max-width:460px;margin:0 auto;">
      <h3>Sign in</h3>
      <div class="sub">Enter your admin credentials.</div>
      <?php if ($loginError): ?><div class="error"><?= AUTH_e($loginError) ?></div><?php endif; ?>

      <form method="post" class="form">
        <input type="hidden" name="mode" value="login">
        <input type="hidden" name="csrf" value="<?= AUTH_e($_SESSION['csrf']) ?>">

        <label>Username
          <input type="text" name="username" required autocomplete="username" autofocus>
        </label>

        <label>Password
          <input type="password" name="password" required autocomplete="current-password">
        </label>

        <button class="button" type="submit">Login</button>
      </form>
    </div>
    <?php
  });
  exit;
}

////////////////////////////////////
// Logged in: expose env as consts //
////////////////////////////////////
if (!defined('PROP_WEBHOOK_URL') && isset($env['PROP_WEBHOOK_URL'])) {
  AUTH_define_if_absent('PROP_WEBHOOK_URL', (string)$env['PROP_WEBHOOK_URL']);
}
if (!defined('N8N_WEBHOOK') && isset($env['N8N_WEBHOOK'])) {
  AUTH_define_if_absent('N8N_WEBHOOK', (string)$env['N8N_WEBHOOK']);
}
if (!defined('RENDERER_URL')) {
  $val = (string)($env['RENDERER_URL'] ?? (AUTH_base_url_guess() . '/index.php'));
  AUTH_define_if_absent('RENDERER_URL', $val);
}
if (!defined('RENDER_KEY') && !empty($env['RENDER_KEY'])) {
  AUTH_define_if_absent('RENDER_KEY', (string)$env['RENDER_KEY']);
}

// From here, the including script continues as normal…

/////////////////////////////
// ---- Page renderer ---- //
/////////////////////////////
function AUTH_render_page(string $title, string $brand, callable $content): void {
  ?>
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title><?= AUTH_e($brand) ?> — <?= AUTH_e($title) ?></title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&family=Orbitron:wght@500;700&display=swap" rel="stylesheet">
    <style>
      :root{
        --accent:#27E1FF; --bg:#0b1220; --card:rgba(255,255,255,0.06);
        --muted:rgba(255,255,255,0.65); --text:#e6f3ff; --border:rgba(255,255,255,0.15);
        --glow:0 0 20px rgba(39,225,255,0.35), inset 0 0 20px rgba(39,225,255,0.08);
      }
      *{box-sizing:border-box}
      html,body{height:100%}
      body{
        margin:0;
        background:
          radial-gradient(1200px 800px at 10% -10%, rgba(39,225,255,0.12), transparent),
          radial-gradient(1000px 700px at 90% 110%, rgba(39,225,255,0.10), transparent),
          var(--bg);
        color:var(--text);
        font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,"Helvetica Neue",Arial,"Noto Sans","Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol",sans-serif;
        display:flex; align-items:flex-start; justify-content:center;
      }
      .wrap{width:100%; max-width:980px; padding:32px clamp(16px,3vw,32px) 60px;}
      .brand{display:flex; align-items:center; gap:12px; font-family:Orbitron,Inter,sans-serif; font-weight:700; letter-spacing:.04em; font-size:22px;}
      .brand .dot{width:10px; height:10px; border-radius:50%; background:var(--accent); box-shadow:var(--glow);}
      .card{
        background:var(--card); border:1px solid var(--border); border-radius:16px; padding:18px; box-shadow:var(--glow);
        margin-top:18px;
      }
      h3{margin:0 0 6px 0; font-size:18px}
      .sub{color:var(--muted); font-size:12px; margin-bottom:12px}
      .form{display:grid; gap:12px; margin-top:8px}
      .form label{display:grid; gap:6px; font-size:13px}
      .form input[type="text"],
      .form input[type="password"],
      .form input[type="url"]{
        padding:12px 14px; border-radius:12px; border:1px solid var(--border);
        background:rgba(255,255,255,0.06); color:var(--text); outline:none; width:100%;
      }
      .button{
        padding:12px 14px; border-radius:12px; border:1px solid var(--border);
        background:linear-gradient(180deg, rgba(255,255,255,0.09), rgba(255,255,255,0.03));
        color:var(--text); cursor:pointer;
      }
      .error{
        border:1px solid #ff5b5b66; background:#ff5b5b1a; color:#ffb5b5; border-radius:12px; padding:10px 12px; margin:8px 0;
        font-size:13px;
      }
      .divider{height:1px; background:var(--border); margin:8px 0}
      .top{display:flex; align-items:center; justify-content:space-between; gap:12px; flex-wrap:wrap;}
      .logout a{color:var(--accent); text-decoration:none; font-size:13px}
      .hint{color:var(--muted); font-size:11px; margin-top:6px}
      @media (max-width:520px){ .wrap{padding-top:20px} }
    </style>
  </head>
  <body>
    <div class="wrap">
      <div class="top">
        <div class="brand"><span class="dot"></span><?= AUTH_e($brand) ?></div>
        <?php if (!empty($_SESSION['auth_user'])): ?>
          <div class="logout">Logged in as <strong><?= AUTH_e((string)$_SESSION['auth_user']) ?></strong> — <a href="?logout=1">Log out</a></div>
        <?php endif; ?>
      </div>
      <?php $content(); ?>
    </div>
  </body>
  </html>
  <?php
}
